{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"모델링_250격자_고양시학습_250격자 세종시테스트_(0제거 version).ipynb의 사본","provenance":[{"file_id":"1pb_EJgnBaXbBIIP9_OpazVax6LPKC3cS","timestamp":1661256393870}],"collapsed_sections":[],"mount_file_id":"1M35JZ64kKCpHi89Fa9PlfL5d0bShUlo3","authorship_tag":"ABX9TyO2fSzjDelFeq6BOu7c4ysr"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","#drive.mount('')\n","df.to_csv('/content/drive/MyDrive/K- Data 2조/코랩/시각화 데이터셋')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":210},"id":"JAjFxDxAoW6h","executionInfo":{"status":"error","timestamp":1661259952257,"user_tz":240,"elapsed":18,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"bdb6b5b0-e964-4a53-d80e-911716fcd8c6"},"execution_count":6,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-33c8c4a48ad8>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;31m#drive.mount('')\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/K- Data 2조/코랩/시각화 데이터셋'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"smujFFyM9tVU","executionInfo":{"status":"ok","timestamp":1661228334821,"user_tz":240,"elapsed":6041,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"1badb565-6fa9-4e84-d082-4e86b3ee9c0f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","E: Unable to locate package fonts-NanumBarunGothic\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 2 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}],"source":["!sudo apt-get install -y fonts-NanumBarunGothic\n","!sudo fc-cache -fv\n","!rm ~/.cache/matplotlib -rf"]},{"cell_type":"code","source":["import pandas as pd"],"metadata":{"id":"c3FoJGlr99Sv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#머신러닝에 필요한 기본 패키지 설치\n","!pip install geopandas\n","!pip install scipy\n","!pip install matplotlib\n","!pip install ipython\n","!pip install scikit-learn\n","!pip install pillow\n","!pip install wrapt\n","!pip install tensorflow==2.0.0\n","!pip install mglearn"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4zjPPjRB9-te","executionInfo":{"status":"ok","timestamp":1661228416574,"user_tz":240,"elapsed":81249,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"8379d2f9-1253-4b4c-cc2f-50075088ad12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting geopandas\n","  Downloading geopandas-0.10.2-py2.py3-none-any.whl (1.0 MB)\n","\u001b[K     |████████████████████████████████| 1.0 MB 4.7 MB/s \n","\u001b[?25hCollecting pyproj>=2.2.0\n","  Downloading pyproj-3.2.1-cp37-cp37m-manylinux2010_x86_64.whl (6.3 MB)\n","\u001b[K     |████████████████████████████████| 6.3 MB 37.6 MB/s \n","\u001b[?25hRequirement already satisfied: pandas>=0.25.0 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.3.5)\n","Requirement already satisfied: shapely>=1.6 in /usr/local/lib/python3.7/dist-packages (from geopandas) (1.8.4)\n","Collecting fiona>=1.8\n","  Downloading Fiona-1.8.21-cp37-cp37m-manylinux2014_x86_64.whl (16.7 MB)\n","\u001b[K     |████████████████████████████████| 16.7 MB 211 kB/s \n","\u001b[?25hRequirement already satisfied: click>=4.0 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (7.1.2)\n","Requirement already satisfied: certifi in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (2022.6.15)\n","Requirement already satisfied: six>=1.7 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (1.15.0)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (57.4.0)\n","Collecting munch\n","  Downloading munch-2.5.0-py2.py3-none-any.whl (10 kB)\n","Collecting click-plugins>=1.0\n","  Downloading click_plugins-1.1.1-py2.py3-none-any.whl (7.5 kB)\n","Collecting cligj>=0.5\n","  Downloading cligj-0.7.2-py3-none-any.whl (7.1 kB)\n","Requirement already satisfied: attrs>=17 in /usr/local/lib/python3.7/dist-packages (from fiona>=1.8->geopandas) (22.1.0)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (2022.2.1)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas>=0.25.0->geopandas) (1.21.6)\n","Installing collected packages: munch, cligj, click-plugins, pyproj, fiona, geopandas\n","Successfully installed click-plugins-1.1.1 cligj-0.7.2 fiona-1.8.21 geopandas-0.10.2 munch-2.5.0 pyproj-3.2.1\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: scipy in /usr/local/lib/python3.7/dist-packages (1.7.3)\n","Requirement already satisfied: numpy<1.23.0,>=1.16.5 in /usr/local/lib/python3.7/dist-packages (from scipy) (1.21.6)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (3.2.2)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (3.0.9)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (0.11.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.4.4)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: numpy>=1.11 in /usr/local/lib/python3.7/dist-packages (from matplotlib) (1.21.6)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib) (4.1.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib) (1.15.0)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: ipython in /usr/local/lib/python3.7/dist-packages (7.9.0)\n","Requirement already satisfied: prompt-toolkit<2.1.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from ipython) (2.0.10)\n","Collecting jedi>=0.10\n","  Downloading jedi-0.18.1-py2.py3-none-any.whl (1.6 MB)\n","\u001b[K     |████████████████████████████████| 1.6 MB 5.1 MB/s \n","\u001b[?25hRequirement already satisfied: backcall in /usr/local/lib/python3.7/dist-packages (from ipython) (0.2.0)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.7/dist-packages (from ipython) (0.7.5)\n","Requirement already satisfied: setuptools>=18.5 in /usr/local/lib/python3.7/dist-packages (from ipython) (57.4.0)\n","Requirement already satisfied: pygments in /usr/local/lib/python3.7/dist-packages (from ipython) (2.6.1)\n","Requirement already satisfied: traitlets>=4.2 in /usr/local/lib/python3.7/dist-packages (from ipython) (5.1.1)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.7/dist-packages (from ipython) (4.4.2)\n","Requirement already satisfied: pexpect in /usr/local/lib/python3.7/dist-packages (from ipython) (4.8.0)\n","Requirement already satisfied: parso<0.9.0,>=0.8.0 in /usr/local/lib/python3.7/dist-packages (from jedi>=0.10->ipython) (0.8.3)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.1.0,>=2.0.0->ipython) (0.2.5)\n","Requirement already satisfied: six>=1.9.0 in /usr/local/lib/python3.7/dist-packages (from prompt-toolkit<2.1.0,>=2.0.0->ipython) (1.15.0)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.7/dist-packages (from pexpect->ipython) (0.7.0)\n","Installing collected packages: jedi\n","Successfully installed jedi-0.18.1\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (1.0.2)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.1.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (3.1.0)\n","Requirement already satisfied: numpy>=1.14.6 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.21.6)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn) (1.7.3)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (7.1.2)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: wrapt in /usr/local/lib/python3.7/dist-packages (1.14.1)\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting tensorflow==2.0.0\n","  Downloading tensorflow-2.0.0-cp37-cp37m-manylinux2010_x86_64.whl (86.3 MB)\n","\u001b[K     |████████████████████████████████| 86.3 MB 40 kB/s \n","\u001b[?25hRequirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (3.3.0)\n","Collecting gast==0.2.2\n","  Downloading gast-0.2.2.tar.gz (10 kB)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.47.0)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (0.37.1)\n","Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (0.8.1)\n","Requirement already satisfied: numpy<2.0,>=1.16.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.21.6)\n","Collecting tensorflow-estimator<2.1.0,>=2.0.0\n","  Downloading tensorflow_estimator-2.0.1-py2.py3-none-any.whl (449 kB)\n","\u001b[K     |████████████████████████████████| 449 kB 52.1 MB/s \n","\u001b[?25hRequirement already satisfied: protobuf>=3.6.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (3.17.3)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.15.0)\n","Requirement already satisfied: google-pasta>=0.1.6 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (0.2.0)\n","Collecting keras-applications>=1.0.8\n","  Downloading Keras_Applications-1.0.8-py3-none-any.whl (50 kB)\n","\u001b[K     |████████████████████████████████| 50 kB 6.6 MB/s \n","\u001b[?25hRequirement already satisfied: absl-py>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.2.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.1.0)\n","Collecting tensorboard<2.1.0,>=2.0.0\n","  Downloading tensorboard-2.0.2-py3-none-any.whl (3.8 MB)\n","\u001b[K     |████████████████████████████████| 3.8 MB 36.0 MB/s \n","\u001b[?25hRequirement already satisfied: wrapt>=1.11.1 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.14.1)\n","Requirement already satisfied: keras-preprocessing>=1.0.5 in /usr/local/lib/python3.7/dist-packages (from tensorflow==2.0.0) (1.1.2)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.7/dist-packages (from keras-applications>=1.0.8->tensorflow==2.0.0) (3.1.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.4.1)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (1.0.1)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (2.23.0)\n","Requirement already satisfied: google-auth<2,>=1.6.3 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (1.35.0)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (0.4.6)\n","Requirement already satisfied: setuptools>=41.0.0 in /usr/local/lib/python3.7/dist-packages (from tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (57.4.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (4.9)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (4.2.4)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.7/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (1.3.1)\n","Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.7/dist-packages (from markdown>=2.6.8->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (4.12.0)\n","Requirement already satisfied: typing-extensions>=3.6.4 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (4.1.1)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.8.1)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.7/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (0.4.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (1.24.3)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (2022.6.15)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3,>=2.21.0->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (2.10)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.7/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.1.0,>=2.0.0->tensorflow==2.0.0) (3.2.0)\n","Requirement already satisfied: cached-property in /usr/local/lib/python3.7/dist-packages (from h5py->keras-applications>=1.0.8->tensorflow==2.0.0) (1.5.2)\n","Building wheels for collected packages: gast\n","  Building wheel for gast (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for gast: filename=gast-0.2.2-py3-none-any.whl size=7554 sha256=f0957f81ee753349c6b23d437383951b204c42f8f6c1ba9d9829fea3bf025479\n","  Stored in directory: /root/.cache/pip/wheels/21/7f/02/420f32a803f7d0967b48dd823da3f558c5166991bfd204eef3\n","Successfully built gast\n","Installing collected packages: tensorflow-estimator, tensorboard, keras-applications, gast, tensorflow\n","  Attempting uninstall: tensorflow-estimator\n","    Found existing installation: tensorflow-estimator 2.8.0\n","    Uninstalling tensorflow-estimator-2.8.0:\n","      Successfully uninstalled tensorflow-estimator-2.8.0\n","  Attempting uninstall: tensorboard\n","    Found existing installation: tensorboard 2.8.0\n","    Uninstalling tensorboard-2.8.0:\n","      Successfully uninstalled tensorboard-2.8.0\n","  Attempting uninstall: gast\n","    Found existing installation: gast 0.5.3\n","    Uninstalling gast-0.5.3:\n","      Successfully uninstalled gast-0.5.3\n","  Attempting uninstall: tensorflow\n","    Found existing installation: tensorflow 2.8.2+zzzcolab20220719082949\n","    Uninstalling tensorflow-2.8.2+zzzcolab20220719082949:\n","      Successfully uninstalled tensorflow-2.8.2+zzzcolab20220719082949\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","tensorflow-probability 0.16.0 requires gast>=0.3.2, but you have gast 0.2.2 which is incompatible.\u001b[0m\n","Successfully installed gast-0.2.2 keras-applications-1.0.8 tensorboard-2.0.2 tensorflow-2.0.0 tensorflow-estimator-2.0.1\n","Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting mglearn\n","  Downloading mglearn-0.1.9.tar.gz (540 kB)\n","\u001b[K     |████████████████████████████████| 540 kB 5.2 MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from mglearn) (1.21.6)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.7/dist-packages (from mglearn) (3.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.7/dist-packages (from mglearn) (1.0.2)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (from mglearn) (1.3.5)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.7/dist-packages (from mglearn) (7.1.2)\n","Requirement already satisfied: cycler in /usr/local/lib/python3.7/dist-packages (from mglearn) (0.11.0)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.7/dist-packages (from mglearn) (2.9.0)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.7/dist-packages (from mglearn) (1.1.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mglearn) (2.8.2)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mglearn) (1.4.4)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.7/dist-packages (from matplotlib->mglearn) (3.0.9)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from kiwisolver>=1.0.1->matplotlib->mglearn) (4.1.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.1->matplotlib->mglearn) (1.15.0)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas->mglearn) (2022.2.1)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->mglearn) (3.1.0)\n","Requirement already satisfied: scipy>=1.1.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn->mglearn) (1.7.3)\n","Building wheels for collected packages: mglearn\n","  Building wheel for mglearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for mglearn: filename=mglearn-0.1.9-py2.py3-none-any.whl size=582639 sha256=6a6cda418ce82186bfeef5ab6f7a4e6cd4af687b378ba9cb4788de793c93557a\n","  Stored in directory: /root/.cache/pip/wheels/f1/17/e1/1720d6dcd70187b6b6c3750cb3508798f2b1d57c9d3214b08b\n","Successfully built mglearn\n","Installing collected packages: mglearn\n","Successfully installed mglearn-0.1.9\n"]}]},{"cell_type":"markdown","source":["# **[Train Dataset]**"],"metadata":{"id":"ybsQZksNHLBw"}},{"cell_type":"markdown","source":["# 학습용 데이터 불러오기\n","\n","\n","*   250격자 고양시(0값 제거)\n","*   500격자 고양시(0값 제거)\n","\n","\n","\n","\n"],"metadata":{"id":"d8Hy7RzO-AtL"}},{"cell_type":"code","source":["df = pd.read_csv('/content/250격자 고양시(0값 제거).csv',  encoding='UTF-8') \n","#df = pd.drop([pd.columns[0]], axis=1)\n","df.head(10)\n","\n","len(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bmbuXq8P-IxK","executionInfo":{"status":"ok","timestamp":1661148241158,"user_tz":240,"elapsed":19,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"7f249df3-e86b-483e-9a0f-ac720b325111"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2776"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["결측치/결측값(missing value) 시각화"],"metadata":{"id":"jox21yd3-Tn9"}},{"cell_type":"code","source":["import missingno as msno\n","msno.matrix(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"qJcGrJ8c-Kq6","executionInfo":{"status":"ok","timestamp":1661148283783,"user_tz":240,"elapsed":1354,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"110b2afd-5900-4b37-cb93-75d131fe92cf"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fec013324d0>"]},"metadata":{},"execution_count":7},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51064 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44396 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44256 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47161 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44148 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47932 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 49688 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 45800 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 46021 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44277 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 46041 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51109 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50528 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51221 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47448 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44060 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50976 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47924 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51064 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44396 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44256 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47161 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44148 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47932 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 49688 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 45800 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 46021 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44277 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 46041 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51109 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50528 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51221 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47448 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44060 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50976 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47924 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x720 with 2 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Target = 정류장유무 지정\n","\n"],"metadata":{"id":"Lh5zEpfs_FvD"}},{"cell_type":"code","source":["target = df['정류장 유무']\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":832},"id":"pLJWbliT_HSI","executionInfo":{"status":"ok","timestamp":1661148328020,"user_tz":240,"elapsed":343,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"864e36fe-6282-4099-aa19-1e648151cbaa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Unnamed: 0                                           geometry    인구  \\\n","0             41  MULTIPOLYGON (((126.67778315758537 37.68167378...   0.0   \n","1             42  MULTIPOLYGON (((126.6777582861303 37.683926894...  11.0   \n","2             53  MULTIPOLYGON (((126.68066768476355 37.67718727...   0.0   \n","3             54  MULTIPOLYGON (((126.68064290456248 37.67944039...   6.0   \n","4             55  MULTIPOLYGON (((126.68061812160066 37.68169351...  52.0   \n","...          ...                                                ...   ...   \n","2771        4396  MULTIPOLYGON (((126.97290340682332 37.64505550...   0.0   \n","2772        4398  MULTIPOLYGON (((126.97287155788261 37.64956203...   0.0   \n","2773        4417  MULTIPOLYGON (((126.97581631384938 37.63380178...   0.0   \n","2774        4422  MULTIPOLYGON (((126.97573715038091 37.64506812...   0.0   \n","2775        4446  MULTIPOLYGON (((126.97857089570276 37.64508068...   0.0   \n","\n","      고령인구   건물수  건물수(단독)  건물수(공동)    장애인 인구  정류장 개수  정류장 유무  \n","0      0.0   3.0      0.0      0.0  0.000000     0.0       0  \n","1      0.0   4.0      1.0      0.0  0.384466     0.0       0  \n","2      0.0   1.0      0.0      0.0  0.000000     0.0       0  \n","3      0.0  14.0      1.0      0.0  0.209709     0.0       0  \n","4     14.0  52.0      8.0      0.0  1.817476     0.0       0  \n","...    ...   ...      ...      ...       ...     ...     ...  \n","2771   0.0   1.0      0.0      0.0  0.000000     0.0       0  \n","2772   0.0   7.0      0.0      0.0  0.000000     0.0       0  \n","2773   0.0   4.0      0.0      0.0  0.000000     0.0       0  \n","2774   0.0   6.0      0.0      0.0  0.000000     0.0       0  \n","2775   0.0   2.0      0.0      0.0  0.000000     0.0       0  \n","\n","[2776 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-9a68e362-c478-4d2b-a9a8-a78677eba420\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>geometry</th>\n","      <th>인구</th>\n","      <th>고령인구</th>\n","      <th>건물수</th>\n","      <th>건물수(단독)</th>\n","      <th>건물수(공동)</th>\n","      <th>장애인 인구</th>\n","      <th>정류장 개수</th>\n","      <th>정류장 유무</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>41</td>\n","      <td>MULTIPOLYGON (((126.67778315758537 37.68167378...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>42</td>\n","      <td>MULTIPOLYGON (((126.6777582861303 37.683926894...</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.384466</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>53</td>\n","      <td>MULTIPOLYGON (((126.68066768476355 37.67718727...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>54</td>\n","      <td>MULTIPOLYGON (((126.68064290456248 37.67944039...</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.209709</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>55</td>\n","      <td>MULTIPOLYGON (((126.68061812160066 37.68169351...</td>\n","      <td>52.0</td>\n","      <td>14.0</td>\n","      <td>52.0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>1.817476</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2771</th>\n","      <td>4396</td>\n","      <td>MULTIPOLYGON (((126.97290340682332 37.64505550...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2772</th>\n","      <td>4398</td>\n","      <td>MULTIPOLYGON (((126.97287155788261 37.64956203...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>7.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2773</th>\n","      <td>4417</td>\n","      <td>MULTIPOLYGON (((126.97581631384938 37.63380178...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2774</th>\n","      <td>4422</td>\n","      <td>MULTIPOLYGON (((126.97573715038091 37.64506812...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2775</th>\n","      <td>4446</td>\n","      <td>MULTIPOLYGON (((126.97857089570276 37.64508068...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2776 rows × 10 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a68e362-c478-4d2b-a9a8-a78677eba420')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9a68e362-c478-4d2b-a9a8-a78677eba420 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9a68e362-c478-4d2b-a9a8-a78677eba420');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["필요없는 컬럼값 제거"],"metadata":{"id":"hNHQOWmM_bl5"}},{"cell_type":"code","source":["df = df.drop(['geometry'], axis=1)\n","df = df.drop([df.columns[0]], axis=1)\n","df = df.drop(['정류장 유무'], axis =1)\n","df = df.drop(['정류장 개수'], axis =1)\n","\n","\n","df.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"Pdo3Ag3R_Xzy","executionInfo":{"status":"ok","timestamp":1661148332011,"user_tz":240,"elapsed":323,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"002f5f86-67bf-4890-8811-c4c416edaa21"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     인구  고령인구   건물수  건물수(단독)  건물수(공동)    장애인 인구\n","0   0.0   0.0   3.0      0.0      0.0  0.000000\n","1  11.0   0.0   4.0      1.0      0.0  0.384466\n","2   0.0   0.0   1.0      0.0      0.0  0.000000\n","3   6.0   0.0  14.0      1.0      0.0  0.209709\n","4  52.0  14.0  52.0      8.0      0.0  1.817476"],"text/html":["\n","  <div id=\"df-44e811f9-6591-446b-93ae-10b81ac130dd\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>인구</th>\n","      <th>고령인구</th>\n","      <th>건물수</th>\n","      <th>건물수(단독)</th>\n","      <th>건물수(공동)</th>\n","      <th>장애인 인구</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.384466</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>14.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.209709</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>52.0</td>\n","      <td>14.0</td>\n","      <td>52.0</td>\n","      <td>8.0</td>\n","      <td>0.0</td>\n","      <td>1.817476</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-44e811f9-6591-446b-93ae-10b81ac130dd')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-44e811f9-6591-446b-93ae-10b81ac130dd button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-44e811f9-6591-446b-93ae-10b81ac130dd');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["정규화(Feature Scaling)"],"metadata":{"id":"OLidbgCYRdqD"}},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","df[:] = scaler.fit_transform(df[:])"],"metadata":{"id":"miUrNo8y_wYl"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"ou486wjYRf11","executionInfo":{"status":"ok","timestamp":1661148337233,"user_tz":240,"elapsed":5,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"ea573900-0da3-4459-f8c0-713f6e97e969"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            인구     고령인구       건물수   건물수(단독)  건물수(공동)    장애인 인구\n","0     0.000000  0.00000  0.017341  0.000000      0.0  0.000000\n","1     0.001839  0.00000  0.023121  0.005952      0.0  0.000631\n","2     0.000000  0.00000  0.005780  0.000000      0.0  0.000000\n","3     0.001003  0.00000  0.080925  0.005952      0.0  0.000344\n","4     0.008691  0.01649  0.300578  0.047619      0.0  0.002983\n","...        ...      ...       ...       ...      ...       ...\n","2771  0.000000  0.00000  0.005780  0.000000      0.0  0.000000\n","2772  0.000000  0.00000  0.040462  0.000000      0.0  0.000000\n","2773  0.000000  0.00000  0.023121  0.000000      0.0  0.000000\n","2774  0.000000  0.00000  0.034682  0.000000      0.0  0.000000\n","2775  0.000000  0.00000  0.011561  0.000000      0.0  0.000000\n","\n","[2776 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-02bfc27c-4233-4eb0-98d4-0eebd31eee57\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>인구</th>\n","      <th>고령인구</th>\n","      <th>건물수</th>\n","      <th>건물수(단독)</th>\n","      <th>건물수(공동)</th>\n","      <th>장애인 인구</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.017341</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.001839</td>\n","      <td>0.00000</td>\n","      <td>0.023121</td>\n","      <td>0.005952</td>\n","      <td>0.0</td>\n","      <td>0.000631</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.005780</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.001003</td>\n","      <td>0.00000</td>\n","      <td>0.080925</td>\n","      <td>0.005952</td>\n","      <td>0.0</td>\n","      <td>0.000344</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.008691</td>\n","      <td>0.01649</td>\n","      <td>0.300578</td>\n","      <td>0.047619</td>\n","      <td>0.0</td>\n","      <td>0.002983</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2771</th>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.005780</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2772</th>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.040462</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2773</th>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.023121</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2774</th>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.034682</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>2775</th>\n","      <td>0.000000</td>\n","      <td>0.00000</td>\n","      <td>0.011561</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>2776 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02bfc27c-4233-4eb0-98d4-0eebd31eee57')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-02bfc27c-4233-4eb0-98d4-0eebd31eee57 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-02bfc27c-4233-4eb0-98d4-0eebd31eee57');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","data_train = df\n","target_train = target\n"],"metadata":{"id":"Bif4kT8g_x_1"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#DecisionTree Classifier"],"metadata":{"id":"jF6mPCaOAj4Y"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.metrics import f1_score\n","from sklearn.metrics import recall_score\n","\n","\n","numNeighbors = list(range(1, 30))\n","trainF1 = []\n","#testF1 = []\n","for k in numNeighbors:\n","    clf = DecisionTreeClassifier(max_depth=k)\n","    clf.fit(data_train, target_train)\n","    Y_predTrain = clf.predict(data_train)\n","    #Y_predTest = clf.predict(data_test)\n","    trainF1.append(f1_score(target_train, Y_predTrain, average='micro'))\n","    #testF1.append(f1_score(target_test, Y_predTest, average='micro'))\n","#plt.figure(figsize=(15, 6))\n","#plt.plot(numNeighbors, trainF1, 'ro-', numNeighbors, testF1, 'bv--')\n","#plt.legend(['Train F1', 'Test F1'])\n","#plt.xlabel('Number of Max_depth')\n","#plt.ylabel('F1 score')\n","#plt.show()\n","#print(\"best testF1 :\", max(testF1))"],"metadata":{"id":"Y44TrJWhAhNL"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["DecisionTree Train 결과 시각화"],"metadata":{"id":"dYbO8J5lA8tr"}},{"cell_type":"code","source":["plt.bar(target.unique(), target.value_counts())\n","plt.xticks([0, 1])\n","plt.show()\n","print(target.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"zprxCGlgAtEg","executionInfo":{"status":"ok","timestamp":1661148422845,"user_tz":240,"elapsed":392,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"b8f34008-6744-4d61-d8e9-f08cb6e9ce59"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["0    2440\n","1     336\n","Name: 정류장 유무, dtype: int64\n"]}]},{"cell_type":"markdown","source":["#KNN"],"metadata":{"id":"s5DwPG3IBHFM"}},{"cell_type":"code","source":["#import matplotlib.pyplot as plt\n","\n","numNeighbors = list(range(1, 30))\n","trainF1 = []\n","#testF1 = []\n","for k in numNeighbors:\n","    clf = KNeighborsClassifier(n_neighbors=k, metric='minkowski', p=2)\n","    clf.fit(data_train, target_train)\n","    Y_predTrain = clf.predict(data_train)\n","    #Y_predTest = clf.predict(data_test)\n","    trainF1.append(f1_score(target_train, Y_predTrain, average='micro'))\n","    #testF1.append(f1_score(target_test, Y_predTest, average='micro'))\n","#plt.figure(figsize=(15, 6))\n","#plt.plot(numNeighbors, trainF1, 'ro-', numNeighbors, testF1, 'bv--')\n","#plt.legend(['Train F1', 'Test F1'])\n","#plt.xlabel('Number of neighbors')\n","#plt.ylabel('F1 score')\n","#plt.show()\n","#print(\"best testF1 :\", max(testF1))"],"metadata":{"id":"hJ-66DwFBeAl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["DecisionTree Train 결과 시각화"],"metadata":{"id":"xZ7kz4xbIvXS"}},{"cell_type":"code","source":["plt.bar(target.unique(), target.value_counts())\n","plt.xticks([0, 1])\n","plt.show()\n","print(target.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":320},"id":"eaG-JRpwFQxt","executionInfo":{"status":"ok","timestamp":1661148433002,"user_tz":240,"elapsed":316,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"ac413057-8a7d-40b5-b232-298cbddb5d26"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["0    2440\n","1     336\n","Name: 정류장 유무, dtype: int64\n"]}]},{"cell_type":"markdown","source":["#Ensemble"],"metadata":{"id":"Unx4tFDZBqh9"}},{"cell_type":"code","source":["from sklearn import ensemble\n","\n","trainAcc = []\n","testAcc = []\n","\n","\n","X_train, Y_train = data_train, target_train"],"metadata":{"id":"c4zgjb02Bn2u"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Ensemble 결과 시각화"],"metadata":{"id":"WZO7C1BFIwtv"}},{"cell_type":"code","source":["plt.bar(target.unique(), target.value_counts())\n","plt.xticks([0, 1])\n","plt.show()\n","print(target.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"LL33f2aGIVch","executionInfo":{"status":"ok","timestamp":1660949840814,"user_tz":240,"elapsed":17,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"d257e6c8-8389-49cc-92de-12eaa1587fc1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAX0AAAD4CAYAAAAAczaOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAMtElEQVR4nO3cX6jf9X3H8edrSe3FWjCSLLgkLFKyQXqxVA5R6C4cMo32IvZG9KIGEdKLCC30Ju2NpaXgYG1BcEKKwQidEmiLYQ1zWSjIYLY5FlGjEw9WSUI0p0uxHUJH3HsX55vuVz0n529+J+b9fMDhfH/v7/f3+31+EJ7nl+/vT6oKSVIPf7LaC5AkjY/Rl6RGjL4kNWL0JakRoy9Jjaxd7QVcyvr162vr1q2rvQxJ+lh54YUXfl1VG2bbd0VHf+vWrUxOTq72MiTpYyXJ23Ptm/f0TpItSX6W5NUkJ5N8ZZh/M8mZJC8OP3eOXOfrSaaSvJ7k9pH5rmE2lWT/ch+YJGlxFvJM/wLwtar6ZZJPAy8kOTbs+35V/cPowUm2A/cAnwX+HPi3JH857H4U+DvgNHAiyZGqenUlHogkaX7zRr+qzgJnh+3fJXkN2HSJq+wGnq6q3wO/SjIF7Bz2TVXVmwBJnh6ONfqSNCaLevdOkq3A54CfD6MHk7yU5GCSdcNsE3Bq5Gqnh9lcc0nSmCw4+kk+BfwI+GpV/RZ4DPgMsIOZ/wl8dyUWlGRvkskkk9PT0ytxk5KkwYKin+QTzAT/h1X1Y4CqereqPqiq/wV+wP+fwjkDbBm5+uZhNtf8j1TVgaqaqKqJDRtmfceRJGmJFvLunQCPA69V1fdG5tePHPZF4JVh+whwT5JPJrkB2Ab8AjgBbEtyQ5JrmHmx98jKPAxJ0kIs5N07nwe+BLyc5MVh9g3g3iQ7gALeAr4MUFUnkxxm5gXaC8C+qvoAIMmDwLPAGuBgVZ1cwcciSZpHruTv05+YmCg/nCVJi5PkhaqamG3fFf2J3OXauv+nq70EXaHeevgLq70EaVX4hWuS1IjRl6RGjL4kNWL0JakRoy9JjRh9SWrE6EtSI0Zfkhox+pLUiNGXpEaMviQ1YvQlqRGjL0mNGH1JasToS1IjRl+SGjH6ktSI0ZekRoy+JDVi9CWpEaMvSY0YfUlqxOhLUiNGX5IaMfqS1IjRl6RGjL4kNWL0JakRoy9JjRh9SWrE6EtSI0Zfkhox+pLUyLzRT7Ilyc+SvJrkZJKvDPPrkhxL8sbwe90wT5JHkkwleSnJjSO3tWc4/o0key7fw5IkzWYhz/QvAF+rqu3AzcC+JNuB/cDxqtoGHB8uA9wBbBt+9gKPwcwfCeAh4CZgJ/DQxT8UkqTxmDf6VXW2qn45bP8OeA3YBOwGDg2HHQLuGrZ3A0/WjOeBa5NcD9wOHKuq81X1G+AYsGtFH40k6ZIWdU4/yVbgc8DPgY1VdXbY9Q6wcdjeBJwaudrpYTbX/MP3sTfJZJLJ6enpxSxPkjSPBUc/yaeAHwFfrarfju6rqgJqJRZUVQeqaqKqJjZs2LASNylJGiwo+kk+wUzwf1hVPx7G7w6nbRh+nxvmZ4AtI1ffPMzmmkuSxmQh794J8DjwWlV9b2TXEeDiO3D2AM+MzO8b3sVzM/DecBroWeC2JOuGF3BvG2aSpDFZu4BjPg98CXg5yYvD7BvAw8DhJA8AbwN3D/uOAncCU8D7wP0AVXU+ybeBE8Nx36qq8yvyKCRJCzJv9Kvq34HMsfvWWY4vYN8ct3UQOLiYBUqSVo6fyJWkRoy+JDVi9CWpEaMvSY0YfUlqxOhLUiNGX5IaMfqS1IjRl6RGjL4kNWL0JakRoy9JjRh9SWrE6EtSI0Zfkhox+pLUiNGXpEaMviQ1YvQlqRGjL0mNGH1JasToS1IjRl+SGjH6ktSI0ZekRoy+JDVi9CWpEaMvSY0YfUlqxOhLUiNGX5IaMfqS1IjRl6RG5o1+koNJziV5ZWT2zSRnkrw4/Nw5su/rSaaSvJ7k9pH5rmE2lWT/yj8USdJ8FvJM/wlg1yzz71fVjuHnKECS7cA9wGeH6/xjkjVJ1gCPAncA24F7h2MlSWO0dr4Dquq5JFsXeHu7gaer6vfAr5JMATuHfVNV9SZAkqeHY19d9IolSUu2nHP6DyZ5aTj9s26YbQJOjRxzepjNNf+IJHuTTCaZnJ6eXsbyJEkfttToPwZ8BtgBnAW+u1ILqqoDVTVRVRMbNmxYqZuVJLGA0zuzqap3L24n+QHwz8PFM8CWkUM3DzMuMZckjcmSnuknuX7k4heBi+/sOQLck+STSW4AtgG/AE4A25LckOQaZl7sPbL0ZUuSlmLeZ/pJngJuAdYnOQ08BNySZAdQwFvAlwGq6mSSw8y8QHsB2FdVHwy38yDwLLAGOFhVJ1f80UiSLmkh7965d5bx45c4/jvAd2aZHwWOLmp1kqQV5SdyJakRoy9JjRh9SWrE6EtSI0Zfkhox+pLUiNGXpEaMviQ1YvQlqRGjL0mNGH1JasToS1IjRl+SGjH6ktSI0ZekRoy+JDVi9CWpEaMvSY0YfUlqxOhLUiNGX5IaMfqS1IjRl6RGjL4kNWL0JakRoy9JjRh9SWrE6EtSI0Zfkhox+pLUiNGXpEaMviQ1YvQlqRGjL0mNzBv9JAeTnEvyysjsuiTHkrwx/F43zJPkkSRTSV5KcuPIdfYMx7+RZM/leTiSpEtZyDP9J4BdH5rtB45X1Tbg+HAZ4A5g2/CzF3gMZv5IAA8BNwE7gYcu/qGQJI3PvNGvqueA8x8a7wYODduHgLtG5k/WjOeBa5NcD9wOHKuq81X1G+AYH/1DIkm6zJZ6Tn9jVZ0dtt8BNg7bm4BTI8edHmZzzT8iyd4kk0kmp6enl7g8SdJslv1CblUVUCuwlou3d6CqJqpqYsOGDSt1s5Iklh79d4fTNgy/zw3zM8CWkeM2D7O55pKkMVpq9I8AF9+Bswd4ZmR+3/AunpuB94bTQM8CtyVZN7yAe9swkySN0dr5DkjyFHALsD7JaWbehfMwcDjJA8DbwN3D4UeBO4Ep4H3gfoCqOp/k28CJ4bhvVdWHXxyWJF1m80a/qu6dY9etsxxbwL45bucgcHBRq5MkrSg/kStJjRh9SWrE6EtSI0Zfkhox+pLUiNGXpEaMviQ1YvQlqRGjL0mNGH1JasToS1IjRl+SGjH6ktSI0ZekRoy+JDVi9CWpEaMvSY0YfUlqxOhLUiNGX5IaMfqS1IjRl6RGjL4kNWL0JakRoy9JjRh9SWrE6EtSI0Zfkhox+pLUiNGXpEaMviQ1YvQlqRGjL0mNLCv6Sd5K8nKSF5NMDrPrkhxL8sbwe90wT5JHkkwleSnJjSvxACRJC7cSz/T/tqp2VNXEcHk/cLyqtgHHh8sAdwDbhp+9wGMrcN+SpEW4HKd3dgOHhu1DwF0j8ydrxvPAtUmuvwz3L0maw3KjX8C/Jnkhyd5htrGqzg7b7wAbh+1NwKmR654eZn8kyd4kk0kmp6enl7k8SdKotcu8/t9U1ZkkfwYcS/KfozurqpLUYm6wqg4ABwAmJiYWdV1J0qUt65l+VZ0Zfp8DfgLsBN69eNpm+H1uOPwMsGXk6puHmSRpTJYc/SR/muTTF7eB24BXgCPAnuGwPcAzw/YR4L7hXTw3A++NnAaSJI3Bck7vbAR+kuTi7fxTVf1LkhPA4SQPAG8Ddw/HHwXuBKaA94H7l3HfkqQlWHL0q+pN4K9nmf8XcOss8wL2LfX+JEnL5ydyJakRoy9JjRh9SWrE6EtSI0Zfkhox+pLUiNGXpEaMviQ1stwvXJO0DFv3/3S1l6Ar1FsPf+Gy3K7P9CWpEaMvSY0YfUlqxOhLUiNGX5IaMfqS1IjRl6RGjL4kNWL0JakRoy9JjRh9SWrE6EtSI0Zfkhox+pLUiNGXpEaMviQ1YvQlqRGjL0mNGH1JasToS1IjRl+SGjH6ktSI0ZekRoy+JDVi9CWpkbFHP8muJK8nmUqyf9z3L0mdjTX6SdYAjwJ3ANuBe5NsH+caJKmzcT/T3wlMVdWbVfU/wNPA7jGvQZLaWjvm+9sEnBq5fBq4afSAJHuBvcPF/07y+pjWdrVbD/x6tRdxpcjfr/YKNAv/jY5Y5r/Rv5hrx7ijP6+qOgAcWO11XG2STFbVxGqvQ5qL/0bHY9ynd84AW0Yubx5mkqQxGHf0TwDbktyQ5BrgHuDImNcgSW2N9fROVV1I8iDwLLAGOFhVJ8e5hsY8ZaYrnf9GxyBVtdprkCSNiZ/IlaRGjL4kNWL0G/CrL3QlS3Iwybkkr6z2Wjow+lc5v/pCHwNPALtWexFdGP2rn199oStaVT0HnF/tdXRh9K9+s331xaZVWoukVWb0JakRo3/186svJP2B0b/6+dUXkv7A6F/lquoCcPGrL14DDvvVF7qSJHkK+A/gr5KcTvLAaq/paubXMEhSIz7Tl6RGjL4kNWL0JakRoy9JjRh9SWrE6EtSI0Zfkhr5P53k+z9m9gJeAAAAAElFTkSuQmCC\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["0    2440\n","1     336\n","Name: 정류장 유무, dtype: int64\n"]}]},{"cell_type":"markdown","source":["#RandomForest\n"],"metadata":{"id":"i1FKcQ0uB3e8"}},{"cell_type":"code","source":["numBaseClassifiers = [10, 20, 50, 100, 200, 300, 500]\n","testF1 = []\n","bestf1 = []\n","\n","for k in numBaseClassifiers:\n","    clf = ensemble.RandomForestClassifier(n_estimators=k)\n","    clf.fit(data_train, target_train)\n","    Y_predTrain = clf.predict(data_train)\n","    #Y_predTest = clf.predict(data_test)\n","    #testF1.append(f1_score(target_test, Y_predTest, average='micro'))\n","\n","#plt.figure(figsize=(15, 6))\n","#plt.plot(numBaseClassifiers, testF1, 'bv--')\n","#plt.xlabel('RandomForest')\n","#plt.ylabel('F1 score')\n","\n","#bestf1.append(max(testF1))"],"metadata":{"id":"SwH3CCfoB1U_"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["RandomForest 결과 시각화"],"metadata":{"id":"2waKtRqbIyWT"}},{"cell_type":"code","source":["plt.bar(target.unique(), target.value_counts())\n","plt.xticks([0, 1])\n","plt.show()\n","print(target.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"34arsv7WGFYH","executionInfo":{"status":"ok","timestamp":1660949851344,"user_tz":240,"elapsed":308,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"0e77e829-abac-4e34-d3dc-d6a7b766caf1"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["0    2440\n","1     336\n","Name: 정류장 유무, dtype: int64\n"]}]},{"cell_type":"markdown","source":["#Bagging\n"],"metadata":{"id":"_ieoMo5uCjaP"}},{"cell_type":"code","source":["numBaseClassifiers = [100, 200, 300, 500]\n","max_depths = [2, 3, 5, 10, 20]\n","F1 = []\n","\n","plt.figure(figsize=(15, 6))\n","for k in numBaseClassifiers:\n","    for maxdepth in max_depths:\n","        clf = ensemble.BaggingClassifier(DecisionTreeClassifier(max_depth=maxdepth), n_estimators=k)\n","        clf.fit(data_train, target_train)\n","        #Y_predTrain = clf.predict(data_train)\n","        #Y_predTest = clf.predict(data_test)\n","        #F1.append(f1_score(target_test, Y_predTest, average='micro'))\n","    #plt.plot(max_depths, F1)\n","    #testF1.append(max(F1))\n","    #F1 = []\n","    \n","#plt.legend(numBaseClassifiers)\n","#plt.xlabel('max_depth')\n","#plt.ylabel('F1 score')\n","\n","#bestf1.append(max(testF1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"--tkFuaECNm0","executionInfo":{"status":"ok","timestamp":1660949892726,"user_tz":240,"elapsed":41386,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"c54fa3e4-232b-4e48-9ba3-a616f3f9ba89"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x432 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","source":["Bagging 결과 시각화"],"metadata":{"id":"uBm8A6RkIzkW"}},{"cell_type":"code","source":["plt.bar(target.unique(), target.value_counts())\n","plt.xticks([0, 1])\n","plt.show()\n","print(target.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"P-mxghwTGNXk","executionInfo":{"status":"ok","timestamp":1660949892727,"user_tz":240,"elapsed":15,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"3bc378fc-5abe-4ede-faa6-30850b5dd6b6"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["0    2440\n","1     336\n","Name: 정류장 유무, dtype: int64\n"]}]},{"cell_type":"markdown","source":["#Adaboost"],"metadata":{"id":"CkfqQDzpDYr_"}},{"cell_type":"code","source":["numBaseClassifiers = [50, 100, 200, 300, 500]\n","max_depths = [1, 2, 3, 5, 10, 20]\n","F1 = []\n","testF1 = []\n","\n","plt.figure(figsize=(15, 6))\n","for k in numBaseClassifiers:\n","    for maxdepth in max_depths:\n","        clf = ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=maxdepth), n_estimators=k)\n","        clf.fit(data_train, target_train)\n","        #Y_predTrain = clf.predict(data_train)\n","        #Y_predTest = clf.predict(data_test)\n","        #F1.append(f1_score(target_test, Y_predTest, average='micro'))\n","\n","    #plt.plot(max_depths, F1)\n","    #testF1.append(max(F1))\n","    #F1 = []\n","\n","#plt.legend(numBaseClassifiers)\n","#plt.xlabel('max_depth')\n","#plt.ylabel('F1 score')\n","\n","#bestf1.append(max(testF1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"tn-hl23FDaM7","executionInfo":{"status":"ok","timestamp":1660949947889,"user_tz":240,"elapsed":55173,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"40198c15-a425-4d08-f980-9d4d03991015"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x432 with 0 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","source":["Adaboost 결과 시각화"],"metadata":{"id":"Cm5TdCOXI08s"}},{"cell_type":"code","source":["plt.bar(target.unique(), target.value_counts())\n","plt.xticks([0, 1])\n","plt.show()\n","print(target.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"2Q5gYOcOGhIu","executionInfo":{"status":"ok","timestamp":1660949947890,"user_tz":240,"elapsed":18,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"ff7963f2-f641-432a-b043-96282a7ce9f3"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["0    2440\n","1     336\n","Name: 정류장 유무, dtype: int64\n"]}]},{"cell_type":"markdown","source":["# **[Test Dataset]**"],"metadata":{"id":"YLB8RPvUJTHX"}},{"cell_type":"markdown","source":["# 테스트용 데이터 불러오기\n","\n","\n","*   250격자 세종시(0값 제거)\n","*   500격자 세종시(0값 제거)\n"],"metadata":{"id":"LKpcA3VQJaP7"}},{"cell_type":"code","source":["#데이터 불러오기\n","s_df = pd.read_csv('/content/250격자 세종시(0값 제거).csv',  encoding='UTF-8') \n","s_df.head(10)\n","len(s_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5v3I0mTNJUKh","executionInfo":{"status":"ok","timestamp":1660951341461,"user_tz":240,"elapsed":289,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"e5620906-d025-4ab1-8ff2-1dc7a5df9d98"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["3339"]},"metadata":{},"execution_count":177}]},{"cell_type":"code","source":["import missingno as msno\n","\n","msno.matrix(s_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"UY7_T9jpJyZA","executionInfo":{"status":"ok","timestamp":1660951343755,"user_tz":240,"elapsed":953,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"fd8bfb90-2915-4718-bc98-12ce38d33391"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f106d4e43d0>"]},"metadata":{},"execution_count":178},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51064 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44396 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44256 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47161 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44148 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47932 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 49688 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 45800 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 46021 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44277 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 46041 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51109 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50528 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 52636 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 48156 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51648 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 46020 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 52265 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 51221 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47448 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 44060 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 50976 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:214: RuntimeWarning: Glyph 47924 missing from current font.\n","  font.set_text(s, 0.0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51064 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44396 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44256 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47161 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44148 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47932 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 49688 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 45800 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 46021 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44277 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 46041 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51109 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50528 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 52636 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 48156 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51648 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 46020 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 52265 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 51221 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47448 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 44060 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 50976 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n","/usr/local/lib/python3.7/dist-packages/matplotlib/backends/backend_agg.py:183: RuntimeWarning: Glyph 47924 missing from current font.\n","  font.set_text(s, 0, flags=flags)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1800x720 with 2 Axes>"],"image/png":"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OQAAAAAADEJzAAAAAAAYhOYAAAAAADAIzQEAAAAAYBCaAwAAAADAIDQHAAAAAIBBaA4AAAAAAIPQHAAAAAAABqE5AAAAAAAMQnMAAAAAABiE5gAAAAAAMAjNAQAAAABgEJoDAAAAAMAgNAcAAAAAgEFoDgAAAAAAg9AcAAAAAAAGoTkAAAAAAAxCcwAAAAAAGITmAAAAAAAwCM0BAAAAAGAQmgMAAAAAwCA0BwAAAACAQWgOAAAAAACD0BwAAAAAAAahOQAAAAAADEJzAAAAAAAYhOYAAAAAADAIzQEAAAAAYBCaAwAAAADAIDQHAAAAAIBBaA4AAAAAAIPQHAAAAAAABqE5AAAAAAAMQnMAAAAAABiE5gAAAAAAMAjNAQAAAABgEJoDAAAAAMAgNAcAAAAAgEFoDgAAAAAAg9AcAAAAAAAGoTkAAAAAAAxCcwAAAAAAGITmAAAAAAAwCM0BAAAAAGAQmgMAAAAAwCA0BwAAAACAQWgOAAAAAACD0BwAAAAAAAahOQAAAAAADEJzAAAAAAAYhOYAAAAAADAIzQEAAAAAYBCaAwAAAADAIDQHAAAAAIBBaA4AAAAAAIPQHAAAAAAABqE5AAAAAAAMQnMAAAAAABiE5gAAAAAAMAjNAQAAAABgEJoDAAAAAMAgNAcAAAAAgEFoDgAAAAAAg9AcAAAAAAAGoTkAAAAAAAxCcwAAAAAAGITmAAAAAAAwCM0BAAAAAGAQmgMAAAAAwCA0BwAAAACAQWgOAAAAAACD0BwAAAAAAAahOQAAAAAADEJzAAAAAAAYhOYAAAAAADAIzQEAAAAAYBCaAwAAAADAIDQHAAAAAIBBaA4AAAAAAIPQHAAAAAAABqE5AAAAAAAMQnMAAAAAABiE5gAAAAAAMAjNAQAAAABgEJoDAAAAAMAgNAcAAAAAgEFoDgAAAAAAg9AcAAAAAAAGoTkAAAAAAAxCcwAAAAAAGITmAAAAAAAwCM0BAAAAAGAQmgMAAAAAwCA0BwAAAACAQWgOAAAAAACD0BwAAAAAAAahOQAAAAAADEJzAAAAAAAYhOYAAAAAADAIzQEAAAAAYBCaAwAAAADAIDQHAAAAAIBBaA4AAAAAAIPQHAAAAAAABqE5AAAAAAAMQnMAAAAAABiE5gAAAAAAMAjNAQAAAABgEJoDAAAAAMAgNAcAAAAAgEFoDgAAAAAAg9AcAAAAAAAGoTkAAAAAAAxCcwAAAAAAGITmAAAAAAAwCM0BAAAAAGAQmgMAAAAAwCA0BwAAAACAQWgOAAAAAACD0BwAAAAAAAahOQAAAAAADEJzAAAAAAAYhOYAAAAAADAIzQEAAAAAYBCaAwAAAADAIDQHAAAAAIBBaA4AAAAAAIPQHAAAAAAABqE5AAAAAAAMQnMAAAAAABiE5gAAAAAAMAjNAQAAAABgEJoDAAAAAMAgNAcAAAAAgEFoDgAAAAAAg9AcAAAAAAAGoTkAAAAAAAxCcwAAAAAAGITmAAAAAAAwCM0BAAAAAGAQmgMAAAAAwCA0BwAAAACAQWgOAAAAAACD0BwAAAAAAAahOQAAAAAADEJzAADg/7d3f7GWnXUZx59fKwmWStEWi5ZCpPjnAg0hDTW00Y4tKBRNIHNjvKHe0AhWjURlvJCKQjGiQRLEaKhpHS8IDQ1ESqVkNEgVNDTWBiolEtpUW5ERHNR2nPH1Yj81pyen4zm104rz+SQnZ++13rXWu8+++543awEAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAAlGgOAAAAAAAlmgMAAAAAQInmAAAAAABQojkAAAAAAJRoDgAAAAAAJZoDAAAAAECJ5gAAAAAAUKI5AAAAAACUaA4AAAAAACWaAwAAAABAieYAAAAAAFCiOQAAAAAA1K6j+cy8bWY+OjP3zsy/z8zhmbl9Zn5pZs7eNvb8mXnXzHxiZu6fmYdm5u9n5mMzc+XMPGWH83/fzNwwM3fOzJdm5sGZ+fzMfGBmLjvBvPbNzId6zEMz87mZuXZmvmFvfwoAAAAAAE51e1lp/jNJnpbkI0nekeRgkmNJ3pTkjpk5f8vYC5L8WJKvJLkpyduTfDDJc5O8J8ktM/N1287/A/35bM/9m0luS7Ivya0z8+btE5qZq5J8NMnlndc7k9yb5OeTfHxmztrD5wMAAAAAeIQu9v3AzNw3M2tmXrNt/6tn5paZ+WL3X/rkzPTUcjK/l+3h+kSevtZ6cIfJ/WqSA0nemOQnuvm2JN+41vrPbWOfkuSPswnhr07y3i27r11rvWmH85+X5FNJDszMu9Za/9Dt35JNWD+e5JK11ie3HPPGJG9J8uYkV+/hMwIAAAAAbHVmkjuTXN+f7Z6WTQ/9g0fZz8lx0r6XXa803ymY18Ph+9u3jD26PZh3+39ks/L8EeNPdP611n3ZfLjTkjxvy66XJ3lqkpu2BvP6tSSHk/z4zJzxKPMGAAAAADihtdaH1loH1lrvS7JT87xhrXVNkpuf+Nn97x09ejR33XVXjhw5kuuuuy5Hjx59sqe0Kyfze3k8HgT6w/19x/80cGZOT/KK3Y7vMd+c5KIkDyX52y27ntXff7f9mLXW8SRfyOa/CRft5joAAAAAAKeSo0ePZv/+/bn77rtz7NixXH/99dm/f//XTDg/WfZye5Ykycy8IZul72cluTDJJdkE8Gt3GHtOktcnmSTPTPLSJM9P8odrrQ8+yvkvTPLKzu3Z2UT5s5L85Frrn7YMffj1t+1wjtOyuX96knxnkkN7+pAAAAAAAP/PHTx4MEeOHHnEtiNHjuTgwYO58sorn6RZPflmrbW3A2buT3Lulk0fTvKatdYDO4z9riSf2bJpZfNQ0AO9VctO578qyW9v2XQkyevWWjdsG/fcJJ/rOV+y1vqrLft+Lsnb+vbAWuutu/x4AAAAAAA7mpmvJnn9Wuv3d9h3TpIvJtm31vqTJ3hqj8m+fftuTXLZDrtuPXTo0Euf6Pk8Vo/397LnleZrrWf1YucmeUk2K8xvn5lXrrU+tW3sXZuhc3qS85K8KskvJ7lkZq5Yax3e4fzvTvLumXlqNqvIr0py/cxcvNa6asu4L8zMNdk87PPjM3NjkvuSvCibB43ekeR7ssP9bAAAAAAATnWHDh26/Mmew/9Fj/me5mutB9Za70/ysiRn5wRPIF1rHV9r3bPWekeS1yb53mzi+YnO/+Ba6zNrrZ9K8jtJXjsz+7eN+ZUk+5N8IpvbuLwuyRnZ3N7lYx32j4/l8wEAAAAAcOrZ80rz7bri+9NJXjgz52y77/hOHn5a6aV7uMzN2cT2S5O8b9v1b0xy4/YDZuYX+vIv93AdAAAAAID/NjNnZvOcxmSzCPk5M/PCJIfXWvfMzDcleU6SZ3TM82fmy0nuX2vd/8TP+NRwMr+Xx7zSfJtv7e/juxh7Xn8f28P593TMzFyQ5OIkf7PWunMP1wEAAAAA2OrCJLf35+uTXNPXD99J40f6/lDfjAGPGgAAAapJREFU/27fXxVOppP2vezqQaAz8x1JHlhrfWXb9tOyuaf4gSS3rbUu7vYXJfnrtdbxbePPTPL+JJcnecta6xe37HvxWuuTO1z7giR/mk04f9la6yNb9j19rfUv28afneSPklyU5BVrrZsDAAAAAAC7sNto/tNJ3prkz5J8PsmXkpyb5PuTPC/J/UkuW2t9uuNvymal921J7knyb0nOT/LybJbD35bkB9daX91yjS9nc//x25Pcm82tYy5I8kN9/c611tXb5vXr3f/nPfa8bP6D8Iwkb1hr/cZe/yAAAAAAAJy6dhvNX5DNsvVLkjw7myj9r0k+m82q7t9aax3eMv6KJD+a5MXZxPUzkvxzkjuSvDfJe9Zax7Zd4+psHir63UmemeT0JA9k85DP31tr3bLDvK5I8rNJXtA5Hc7mAaBvX2v9xW7/CAAAAAAAkOwymgMAAAAAwKng8XoQKAAAAAAAfM0TzQEAAAAAoERzAAAAAAAo0RwAAAAAAEo0BwAAAACAEs0BAAAAAKBEcwAAAAAAKNEcAAAAAABKNAcAAAAAgBLNAQAAAACg/gu+3bR6cZI6IAAAAABJRU5ErkJggg==\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Target = 정류장 유무 지정\n","\n"],"metadata":{"id":"GaJGoCloKOXi"}},{"cell_type":"code","source":["S_target = s_df['정류장 유무']\n","s_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":659},"id":"JACjcK_iKPyo","executionInfo":{"status":"ok","timestamp":1660951345953,"user_tz":240,"elapsed":279,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"145f0365-a724-4331-84e9-132ab01bfd6e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Unnamed: 0                                           geometry    인구  \\\n","0             16  MULTIPOLYGON (((127.1361196906431 36.708204388...   0.0   \n","1             17  MULTIPOLYGON (((127.13610906425943 36.71045806...   6.0   \n","2             29  MULTIPOLYGON (((127.1389187193515 36.708212911...   0.0   \n","3             30  MULTIPOLYGON (((127.1389081747034 36.710466584...  22.0   \n","4             31  MULTIPOLYGON (((127.13889762888313 36.71272025...   0.0   \n","...          ...                                                ...   ...   \n","3334        7765  MULTIPOLYGON (((127.40508212079371 36.50363085...   9.0   \n","3335        7766  MULTIPOLYGON (((127.40507936945991 36.50588465...  24.0   \n","3336        7773  MULTIPOLYGON (((127.40505183929982 36.52842252...   0.0   \n","3337        7777  MULTIPOLYGON (((127.40788449849332 36.49461786...   0.0   \n","3338        7782  MULTIPOLYGON (((127.40787114939728 36.50588683...   0.0   \n","\n","      고령인구   건물수  건물수(단독)  건물수(공동)    장애인 인구  출발지도착지  정류장 개수  정류장 유무  \n","0      0.0   1.0      1.0      0.0  0.000000     0.0     0.0       0  \n","1      0.0   2.0      2.0      0.0  0.623145     0.0     0.0       0  \n","2      0.0   6.0      3.0      0.0  0.000000     0.0     0.0       0  \n","3     10.0  12.0     11.0      0.0  2.284866     0.0     0.0       0  \n","4      0.0   4.0      1.0      0.0  0.000000     0.0     0.0       0  \n","...    ...   ...      ...      ...       ...     ...     ...     ...  \n","3334   6.0   6.0      6.0      0.0  0.855057     0.0     0.0       0  \n","3335  10.0  11.0     10.0      0.0  2.280151     0.0     0.0       0  \n","3336   0.0   5.0      2.0      0.0  0.000000     0.0     0.0       0  \n","3337   0.0   3.0      2.0      0.0  0.000000     0.0     0.0       0  \n","3338   0.0   1.0      1.0      0.0  0.000000     0.0     0.0       0  \n","\n","[3339 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-ba2b5ac8-4d81-48a8-8ee2-25cb2150b60b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>geometry</th>\n","      <th>인구</th>\n","      <th>고령인구</th>\n","      <th>건물수</th>\n","      <th>건물수(단독)</th>\n","      <th>건물수(공동)</th>\n","      <th>장애인 인구</th>\n","      <th>출발지도착지</th>\n","      <th>정류장 개수</th>\n","      <th>정류장 유무</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>16</td>\n","      <td>MULTIPOLYGON (((127.1361196906431 36.708204388...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>17</td>\n","      <td>MULTIPOLYGON (((127.13610906425943 36.71045806...</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.623145</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>29</td>\n","      <td>MULTIPOLYGON (((127.1389187193515 36.708212911...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>30</td>\n","      <td>MULTIPOLYGON (((127.1389081747034 36.710466584...</td>\n","      <td>22.0</td>\n","      <td>10.0</td>\n","      <td>12.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>2.284866</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>31</td>\n","      <td>MULTIPOLYGON (((127.13889762888313 36.71272025...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3334</th>\n","      <td>7765</td>\n","      <td>MULTIPOLYGON (((127.40508212079371 36.50363085...</td>\n","      <td>9.0</td>\n","      <td>6.0</td>\n","      <td>6.0</td>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>0.855057</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3335</th>\n","      <td>7766</td>\n","      <td>MULTIPOLYGON (((127.40507936945991 36.50588465...</td>\n","      <td>24.0</td>\n","      <td>10.0</td>\n","      <td>11.0</td>\n","      <td>10.0</td>\n","      <td>0.0</td>\n","      <td>2.280151</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3336</th>\n","      <td>7773</td>\n","      <td>MULTIPOLYGON (((127.40505183929982 36.52842252...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>5.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3337</th>\n","      <td>7777</td>\n","      <td>MULTIPOLYGON (((127.40788449849332 36.49461786...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3338</th>\n","      <td>7782</td>\n","      <td>MULTIPOLYGON (((127.40787114939728 36.50588683...</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3339 rows × 11 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba2b5ac8-4d81-48a8-8ee2-25cb2150b60b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ba2b5ac8-4d81-48a8-8ee2-25cb2150b60b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ba2b5ac8-4d81-48a8-8ee2-25cb2150b60b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":179}]},{"cell_type":"markdown","source":["Target 값 시각화"],"metadata":{"id":"wWKSkvD8WVa-"}},{"cell_type":"code","source":["plt.bar(target_test.unique(), target_test.value_counts())\n","plt.xticks([0, 1])\n","plt.show()\n","print(target_test.value_counts())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"D9VBFUz1SjGR","executionInfo":{"status":"ok","timestamp":1660951348624,"user_tz":240,"elapsed":295,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"c20c8469-110b-4752-f4be-82b0701f784e"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["0    3234\n","1     105\n","Name: 정류장 유무, dtype: int64\n"]}]},{"cell_type":"code","source":["df.columns"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":175},"id":"joEwd42jNjaB","executionInfo":{"status":"error","timestamp":1660966983248,"user_tz":240,"elapsed":5,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"92d56d70-9c07-4568-be16-f87fd6788397"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-b666bf274d0a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"]}]},{"cell_type":"markdown","source":["필요없는 column값 제거"],"metadata":{"id":"6jJqGi9CK5Yo"}},{"cell_type":"code","source":["s_df = s_df.drop(['geometry'], axis=1)\n","s_df = s_df.drop(['Unnamed: 0'], axis=1)\n","s_df = s_df.drop(['정류장 유무'], axis =1)\n","s_df = s_df.drop(['정류장 개수'], axis =1)\n","s_df = s_df.drop(['출발지도착지'], axis =1)\n","\n","\n","s_df.head(5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"lNBE6ZoBKaWu","executionInfo":{"status":"ok","timestamp":1660951360484,"user_tz":240,"elapsed":261,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"f2cce7fd-4e6c-4bda-c739-2d32790fc7e7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["     인구  고령인구   건물수  건물수(단독)  건물수(공동)    장애인 인구\n","0   0.0   0.0   1.0      1.0      0.0  0.000000\n","1   6.0   0.0   2.0      2.0      0.0  0.623145\n","2   0.0   0.0   6.0      3.0      0.0  0.000000\n","3  22.0  10.0  12.0     11.0      0.0  2.284866\n","4   0.0   0.0   4.0      1.0      0.0  0.000000"],"text/html":["\n","  <div id=\"df-6f5ad6b3-d8c8-474d-a5ad-8b0e87593c52\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>인구</th>\n","      <th>고령인구</th>\n","      <th>건물수</th>\n","      <th>건물수(단독)</th>\n","      <th>건물수(공동)</th>\n","      <th>장애인 인구</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6.0</td>\n","      <td>0.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>0.0</td>\n","      <td>0.623145</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>6.0</td>\n","      <td>3.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>22.0</td>\n","      <td>10.0</td>\n","      <td>12.0</td>\n","      <td>11.0</td>\n","      <td>0.0</td>\n","      <td>2.284866</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>4.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6f5ad6b3-d8c8-474d-a5ad-8b0e87593c52')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6f5ad6b3-d8c8-474d-a5ad-8b0e87593c52 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6f5ad6b3-d8c8-474d-a5ad-8b0e87593c52');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":182}]},{"cell_type":"markdown","source":["정규화(Feature Scaling)"],"metadata":{"id":"joLNbSbrRVNq"}},{"cell_type":"code","source":["from sklearn.preprocessing import MinMaxScaler\n","scaler = MinMaxScaler()\n","s_df[:] = scaler.fit_transform(s_df[:])"],"metadata":{"id":"azVhr5srLJvb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["s_df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"0GDOI1_7Pzzb","executionInfo":{"status":"ok","timestamp":1660951363273,"user_tz":240,"elapsed":4,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"fe294b17-7635-4ec9-a4bd-6643e840d4a8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            인구      고령인구       건물수   건물수(단독)  건물수(공동)    장애인 인구\n","0     0.000000  0.000000  0.004762  0.006369      0.0  0.000000\n","1     0.002189  0.000000  0.009524  0.012739      0.0  0.006412\n","2     0.000000  0.000000  0.028571  0.019108      0.0  0.000000\n","3     0.008026  0.019231  0.057143  0.070064      0.0  0.023512\n","4     0.000000  0.000000  0.019048  0.006369      0.0  0.000000\n","...        ...       ...       ...       ...      ...       ...\n","3334  0.003283  0.011538  0.028571  0.038217      0.0  0.008799\n","3335  0.008756  0.019231  0.052381  0.063694      0.0  0.023464\n","3336  0.000000  0.000000  0.023810  0.012739      0.0  0.000000\n","3337  0.000000  0.000000  0.014286  0.012739      0.0  0.000000\n","3338  0.000000  0.000000  0.004762  0.006369      0.0  0.000000\n","\n","[3339 rows x 6 columns]"],"text/html":["\n","  <div id=\"df-38ef3aea-9266-4ca7-8262-b8478e5ea97e\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>인구</th>\n","      <th>고령인구</th>\n","      <th>건물수</th>\n","      <th>건물수(단독)</th>\n","      <th>건물수(공동)</th>\n","      <th>장애인 인구</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.004762</td>\n","      <td>0.006369</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.002189</td>\n","      <td>0.000000</td>\n","      <td>0.009524</td>\n","      <td>0.012739</td>\n","      <td>0.0</td>\n","      <td>0.006412</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.028571</td>\n","      <td>0.019108</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.008026</td>\n","      <td>0.019231</td>\n","      <td>0.057143</td>\n","      <td>0.070064</td>\n","      <td>0.0</td>\n","      <td>0.023512</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.019048</td>\n","      <td>0.006369</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3334</th>\n","      <td>0.003283</td>\n","      <td>0.011538</td>\n","      <td>0.028571</td>\n","      <td>0.038217</td>\n","      <td>0.0</td>\n","      <td>0.008799</td>\n","    </tr>\n","    <tr>\n","      <th>3335</th>\n","      <td>0.008756</td>\n","      <td>0.019231</td>\n","      <td>0.052381</td>\n","      <td>0.063694</td>\n","      <td>0.0</td>\n","      <td>0.023464</td>\n","    </tr>\n","    <tr>\n","      <th>3336</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.023810</td>\n","      <td>0.012739</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3337</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.014286</td>\n","      <td>0.012739</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3338</th>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.004762</td>\n","      <td>0.006369</td>\n","      <td>0.0</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3339 rows × 6 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38ef3aea-9266-4ca7-8262-b8478e5ea97e')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-38ef3aea-9266-4ca7-8262-b8478e5ea97e button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-38ef3aea-9266-4ca7-8262-b8478e5ea97e');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":184}]},{"cell_type":"code","source":["data_test = s_df\n","target_test = S_target"],"metadata":{"id":"2-AoiXgXL0rl"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#DecisionTree Classifier"],"metadata":{"id":"OOT5rV30SBba"}},{"cell_type":"code","source":["numNeighbors = list(range(1, 30))\n","#trainF1 = []\n","testF1 = []\n","for k in numNeighbors:\n","    clf = DecisionTreeClassifier(max_depth=k)\n","    clf.fit(data_train, target_train)\n","    #Y_predTrain = clf.predict(data_train)\n","    Y_predTest = clf.predict(data_test)\n","    #trainF1.append(f1_score(target_train, Y_predTrain, average='micro'))\n","    testF1.append(f1_score(target_test, Y_predTest, average='micro'))\n","plt.figure(figsize=(15, 6))\n","plt.plot(numNeighbors, trainF1, 'ro-', numNeighbors, testF1, 'bv--')\n","plt.legend(['Train F1', 'Test F1'])\n","plt.xlabel('Number of Max_depth')\n","plt.ylabel('F1 score')\n","plt.show()\n","print(\"best testF1 :\", max(testF1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":408},"id":"a6AsgDzTSEST","executionInfo":{"status":"ok","timestamp":1660951367480,"user_tz":240,"elapsed":1005,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"a162d35c-6c91-42f7-c1aa-67dc26a792f5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["best testF1 : 0.9685534591194969\n"]}]},{"cell_type":"markdown","source":["#KNN"],"metadata":{"id":"k68-2BDOS-5a"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","numNeighbors = list(range(1, 30))\n","#trainF1 = []\n","testF1 = []\n","for k in numNeighbors:\n","    clf = KNeighborsClassifier(n_neighbors=k, metric='minkowski', p=2)\n","    clf.fit(data_train, target_train)\n","    #Y_predTrain = clf.predict(data_train)\n","    Y_predTest = clf.predict(data_test)\n","    #trainF1.append(f1_score(target_train, Y_predTrain, average='micro'))\n","    testF1.append(f1_score(target_test, Y_predTest, average='micro'))\n","plt.figure(figsize=(15, 6))\n","plt.plot(numNeighbors, trainF1, 'ro-', numNeighbors, testF1, 'bv--')\n","plt.legend(['Train F1', 'Test F1'])\n","plt.xlabel('Number of neighbors')\n","plt.ylabel('F1 score')\n","plt.show()\n","print(\"best testF1 :\", max(testF1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":407},"id":"t8b-0akVTDTC","executionInfo":{"status":"ok","timestamp":1660951375472,"user_tz":240,"elapsed":4782,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"4617e7e2-c2c6-4b5c-8c7a-e03670e86bf0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}},{"output_type":"stream","name":"stdout","text":["best testF1 : 0.9700509134471399\n"]}]},{"cell_type":"markdown","source":["#Ensemble"],"metadata":{"id":"LKQtlbD7Tbge"}},{"cell_type":"code","source":["from sklearn import ensemble\n","\n","trainAcc = []\n","testAcc = []\n","\n","X_test, Y_test = data_test, target_test"],"metadata":{"id":"c5AIcy9CU1p9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#*RandomForest* "],"metadata":{"id":"QVbookYITbiN"}},{"cell_type":"code","source":["numBaseClassifiers = [100, 200, 300, 500]\n","max_depths = [2, 3, 5, 10, 20]\n","F1 = []\n","\n","plt.figure(figsize=(15, 6))\n","for k in numBaseClassifiers:\n","    for maxdepth in max_depths:\n","        clf = ensemble.BaggingClassifier(DecisionTreeClassifier(max_depth=maxdepth), n_estimators=k)\n","        clf.fit(data_train, target_train)\n","        #Y_predTrain = clf.predict(data_train)\n","        Y_predTest = clf.predict(data_test)\n","        F1.append(f1_score(target_test, Y_predTest, average='micro'))\n","    plt.plot(max_depths, F1)\n","    testF1.append(max(F1))\n","    F1 = []\n","    \n","plt.legend(numBaseClassifiers)\n","plt.xlabel('max_depth')\n","plt.ylabel('F1 score')\n","\n","bestf1.append(max(testF1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":760},"id":"EAAjc5S2U2MH","executionInfo":{"status":"error","timestamp":1660951380928,"user_tz":240,"elapsed":3721,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"f8a7b9b8-859a-4d65-a258-ee206c8095b1"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-189-b5d745dcd9b5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mmaxdepth\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmax_depths\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m         \u001b[0mclf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensemble\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBaggingClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mDecisionTreeClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmaxdepth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_estimators\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m         \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m         \u001b[0;31m#Y_predTrain = clf.predict(data_train)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mY_predTest\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_bagging.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m    267\u001b[0m             \u001b[0mmulti_output\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    268\u001b[0m         )\n\u001b[0;32m--> 269\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_fit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax_samples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    270\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    271\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_parallel_args\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_bagging.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, max_samples, max_depth, sample_weight)\u001b[0m\n\u001b[1;32m    405\u001b[0m                 \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    406\u001b[0m             )\n\u001b[0;32m--> 407\u001b[0;31m             \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mn_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    408\u001b[0m         )\n\u001b[1;32m    409\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1041\u001b[0m             \u001b[0;31m# remaining jobs.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1042\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1043\u001b[0;31m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1044\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1045\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    859\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    860\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 861\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    862\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    863\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    777\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    778\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 779\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    780\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    781\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    570\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/fixes.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    214\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mconfig_context\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfunction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_bagging.py\u001b[0m in \u001b[0;36m_parallel_build_estimators\u001b[0;34m(n_estimators, ensemble, X, y, sample_weight, seeds, total_n_estimators, verbose)\u001b[0m\n\u001b[1;32m     94\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m         \u001b[0mrandom_state\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mseeds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m         \u001b[0mestimator\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensemble\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_estimator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m         \u001b[0;31m# Draw random feature, sample indices\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/ensemble/_base.py\u001b[0m in \u001b[0;36m_make_estimator\u001b[0;34m(self, append, random_state)\u001b[0m\n\u001b[1;32m    169\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrandom_state\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 171\u001b[0;31m             \u001b[0m_set_random_states\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    172\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    173\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mappend\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Bagging"],"metadata":{"id":"r7L5qhwHTbjw"}},{"cell_type":"code","source":["numBaseClassifiers = [100, 200, 300, 500]\n","max_depths = [2, 3, 5, 10, 20]\n","F1 = []\n","\n","plt.figure(figsize=(15, 6))\n","for k in numBaseClassifiers:\n","    for maxdepth in max_depths:\n","        clf = ensemble.BaggingClassifier(DecisionTreeClassifier(max_depth=maxdepth), n_estimators=k)\n","        clf.fit(data_train, target_train)\n","        #Y_predTrain = clf.predict(data_train)\n","        Y_predTest = clf.predict(data_test)\n","        F1.append(f1_score(target_test, Y_predTest, average='micro'))\n","    plt.plot(max_depths, F1)\n","    testF1.append(max(F1))\n","    F1 = []\n","    \n","plt.legend(numBaseClassifiers)\n","plt.xlabel('max_depth')\n","plt.ylabel('F1 score')\n","\n","bestf1.append(max(testF1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":389},"id":"jiICZ3o-U2qz","executionInfo":{"status":"ok","timestamp":1660951621591,"user_tz":240,"elapsed":30204,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"db4cc1b0-c94e-4339-a9ac-355116358d7a"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["#Adaboost "],"metadata":{"id":"ob3r21jqTblo"}},{"cell_type":"code","source":["numBaseClassifiers = [50, 100, 200, 300, 500]\n","max_depths = [1, 2, 3, 5, 10, 20]\n","F1 = []\n","testF1 = []\n","\n","plt.figure(figsize=(15, 6))\n","for k in numBaseClassifiers:\n","    for maxdepth in max_depths:\n","        clf = ensemble.AdaBoostClassifier(DecisionTreeClassifier(max_depth=maxdepth), n_estimators=k)\n","        clf.fit(data_train, target_train)\n","        #Y_predTrain = clf.predict(data_train)\n","        Y_predTest = clf.predict(data_test)\n","        F1.append(f1_score(target_test, Y_predTest, average='micro'))\n","\n","    plt.plot(max_depths, F1)\n","    testF1.append(max(F1))\n","    F1 = []\n","\n","plt.legend(numBaseClassifiers)\n","plt.xlabel('max_depth')\n","plt.ylabel('F1 score')\n","\n","bestf1.append(max(testF1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":389},"id":"bLiSy4ExU3NH","executionInfo":{"status":"ok","timestamp":1660951704948,"user_tz":240,"elapsed":62866,"user":{"displayName":"Juhyun Lee","userId":"02098146817146575775"}},"outputId":"23053fe3-ab77-4003-c933-24549e016243"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1080x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}